buildscript {
    repositories {
        if( project.hasProperty('internalArtifactRepository') ){
            maven { url project.internalArtifactRepository }
        } else {
            jcenter()
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/sonar.gradle"

description 'Gradle plugin for running SoapUI projects'
group 'com.lv.plugins'
version = '0.1'

targetCompatibility = 1.6
sourceCompatibility = 1.6

repositories {
    if( project.hasProperty('internalArtifactRepository') ){
        maven { url project.internalArtifactRepository }
    } else {
        maven { url 'http://www.eviware.com/repository/maven2/' }
        mavenCentral()
        jcenter()
    }
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        force 'log4j:log4j:1.2.10',
                'commons-codec:commons-codec:1.4',
                'commons-io:commons-io:1.4',
                'org.apache.httpcomponents:httpcore:4.2.5',
                'org.apache.httpcomponents:httpclient:4.2.5',
                'commons-logging:commons-logging:1.1.1',
                'commons-lang:commons-lang:2.4',
                'xalan:xalan:2.7.1',
                'xml-apis:xml-apis:1.3.04',
                'junit:junit:4.10',
                'xom:xom:1.1',
                'org.apache.santuario:xmlsec:1.4.5'
    }
}

dependencies {
    compile localGroovy()
    compile gradleApi()

    /**
     * SoapUI dependencies
     */
    compile ('com.smartbear.soapui:soapui:5.0.1') {
        exclude module: 'commons-logging'
        exclude( module: 'log4j' )
        exclude module: 'jtidy'
        exclude module: 'cajo'
        exclude group: 'org.codehaus.groovy'
    }

    testCompile ('com.netflix.nebula:nebula-test:2.2.+'){
        exclude group: 'org.codehaus.groovy'
    }
}

/**
 * Integration Testing
 */
sourceSets {
    integTest {
        java.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integTest(type: Test, group: 'verification') {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    reports.html.destination = file("${buildDir}/reports/integTests")
}

task jacocoIntegTestReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData integTest
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoInteg"
    }
}

integTest.mustRunAfter test
check.dependsOn integTest
test.finalizedBy jacocoTestReport
integTest.finalizedBy jacocoIntegTestReport

/**
 * Publishing
 */
task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact groovydocJar
            artifact javadocJar
        }
    }
}

bintray {
    user = project.hasProperty( 'bintray_user' ) ? project.getProperty( 'bintray_user') : null
    key = project.hasProperty( 'bintray_api_key') ? project.getProperty('bintray_api_key') : null
    publications = ['mavenJava'] //When uploading Maven-based publication files

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'gradle-plugins'
        name = 'soapui-gradle-plugin'
        desc = 'Gradle plugin for running SoapUI projects'
    }

    pkg {
        websiteUrl = 'https://github.com/willis7/soapui-gradle-plugin'
        issueTrackerUrl = 'https://github.com/willis7/soapui-gradle-plugin/issues'
        vcsUrl = 'https://github.com/willis7/soapui-gradle-plugin.git'
        licenses = ['GPL-2.0']
        labels = ['gradle', 'plugin', 'soapui']
        publicDownloadNumbers = true

        attributes = ['gradle-plugin': ["com.lv.plugins.soapui:${project.group}:${project.name}"]]

        version {
            vcsTag = "v$project.version"
        }
    }
}

wrapper {
    gradleVersion = 2.3
}